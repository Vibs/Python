
#¤ ex1: python students

# Based on the Student class below, create a PythonStudents class that acts as a collection of students. 
# The class should implement the iterations functionality (iter() and next()) and be able to return an iter object. 
# When iterated the Pythod_students object should return the name of each student in the list.

class PythonStudents:

    def __init__(self):
        self.students = []
        self.students.append(Student('Vibe', 1111))
        self.students.append(Student('Tobias', 121))


    # nu kan vi bruge +
    def __add__(self, other):
        self.students.append(other)

    # hver gang jeg laver en ny iterator-obj, så kaldes denne
    # ps = PythonStudents()
    # iter(ps) # == her bliver __iter__ kaldt
    def __iter__(self):
        self.count = 0
        return self

    def __next__(self):
        if len(self.students) == 0 or self.count >= len(self.students):
            raise StopIteration
        else:
            self.temp = self.count
            self.count += 1
            return self.students[self.temp].name


class Student:

    def __init__(self, name, cpr):
        self.name = name
        self.cpr = cpr

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        self.__name = name.upper()

    def __add__(self, student):
        return Student('Anna the daugther', 1234)

    def __str__(self):
        return f'{self.name}, {self.cpr}'

    def __repr__(self):
        return f'{self.__dict__}'



ps = PythonStudents()

it = iter(ps) # her bliver __iter__ i PythonStudents kaldt

# kalder __next__ i PythonStudents
# bør printe navnet på den næste ud 
next(it)

for i in ps:
    print(i)



#¤ lav PythonStudents som en generator-function i stedet
students = []
students.append(Student('Vibe', 134))
students.append(Student('Tobias', 33324))
students.append(Student('Rasmus', 5444))

# nedenunder det her obj ligger der et som ligner vores PythonStudents-klasse
# vi kan bare bruge denne her generator-function til at gøre det nemmere og hurtigere for os selv
def python_students():
    for student in students:
        # yield == giver et generator-obj
        yield student.name

it = python_students()

# burde give det samme
next(it)
next(it)

# giver mig et generator-obj
# yield == giver et generator-obj
# dette er et generator-expresssion (kind og ligesom list comprehension - bare med () og returnerer et generator-obj)
studGen = (i for i in students)
next(studGen)

#¤ Ex2
# Jeg får altså 3 ting til at gøre kind of det samme: en normal funktion, en generator funktion og en generator expression

# In this exercise you start out by having a list of names, and a list of majors.
# Your job is to create:
#A list of dictionaries of students (ie: students = [{‘id’: 1,’name’: ‘Claus’, ‘major’: ‘Math’}]), cretated in a normal function that returns the resul.
#A Generator that “returns” a generator object. So the student is yield instead of returned.

#Both functions should do the same, but one returns a list and one a generator object.

#students = [{‘id’: 1,’name’: ‘Clasu’, ‘major’: ‘Math’}]
#The id could be generated by a counter or like in a loop.
#The Name should be found by randomly chosing a name from the names list
#The Major should be found by randomly chosing a major from the major list

import random
# n = random.random()
# print(n)


names = ['John', 'Corey', 'Adam', 'Steve', 'Rick', 'Thomas'] # 6 // randint(0, 6) 0-5
majors = ['Math', 'Engineering', 'CompSci', 'Arts', 'Business']

#! normal funktion
def students_list(num_students):
    return [{'id' : i + 1, 'name' : names[random.randint(0, len(names) -1)], 'major' : majors[random.randint(0, len(majors)-1)]} for i in range(num_students)]


print(students_list(3))

#! generator function:
# når man kalder next() på den, så generer 
def students_generator(num_students):
    for i in range(num_students):
        yield {'id' : i + 1, 'name' : random.choice(names), 'major' : random.choice(majors)}
    

it = students_generator(3)

next(it)

#! generator expression:
amountOfStudents = 4

genEx = ({'id' : i + 1, 'name' : random.choice(names), 'major' : random.choice(majors)} for i in range(amountOfStudents))

next(genEx)
# man kan OGSÅ sige: 
#   random.choice(names) 
#   I STEDET FOR: 
#   names[random.randint(0, len(names)-1)]






#people = students_list(1000000)
#people = students_generator(1000000)